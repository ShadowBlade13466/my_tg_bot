# main_bot.py

import asyncio
import logging
import sqlite3
import random
import os
from datetime import datetime, timedelta, date

from aiogram import Bot, Dispatcher, types, F, Router, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

# ----- ‚öôÔ∏è –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ë–û–¢–ê ‚öôÔ∏è -----
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPONSOR_CHANNEL = os.getenv("SPONSOR_CHANNEL")
ADMIN_IDS = [admin_id.strip() for admin_id in os.getenv("ADMIN_ID", "").split(',') if admin_id]

# ----- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –õ–û–ì–Ü–í -----
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ----- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫–æ–Ω–æ–º—ñ–∫–∏ -----
DB_NAME = "economy_bot.db"
START_COINS = 1000
REFERRAL_BONUS = 1000
REFERRED_BONUS = 2000
MIN_BET = 50
STAR_SELL_PRICE = 20000
STAR_BUY_PRICE = 22000
BATTLE_PASS_COST_STARS = 25

# ----- üìà –†–ê–ù–ì–ò üìà -----
RANKS = {
    1: (0, "üå± –ù–æ–≤–∏—á–æ–∫"), 2: (5000, "ü•à –ò–≥—Ä–æ–∫"), 3: (15000, "ü•â –û–ø—ã—Ç–Ω—ã–π"), 4: (30000, "ü•â –ë—ã–≤–∞–ª—ã–π"),
    5: (50000, "ü•â –í–µ—Ç–µ—Ä–∞–Ω"), 6: (100000, "ü•à –ú–∞—Å—Ç–µ—Ä"), 7: (250000, "ü•à –≠–∫—Å–ø–µ—Ä—Ç"), 8: (500000, "ü•à –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"),
    9: (1000000, "ü•á –õ–µ–≥–µ–Ω–¥–∞"), 10: (2500000, "ü•á –ú–∏–ª–ª–∏–æ–Ω–µ—Ä"), 11: (5000000, "üíé –ú–∞–≥–Ω–∞—Ç"),
    12: (10000000, "üëë –ö–æ—Ä–æ–ª—å —ç–∫–æ–Ω–æ–º–∏–∫–∏"), 13: (25000000, "‚ú® –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç"),
    14: (50000000, "üåå –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω–∫–∏—Ä"), 15: (100000000, "üî± –ë–æ–∂–µ—Å—Ç–≤–æ"),
    16: (float('inf'), "üëë –ê–±—Å–æ–ª—é—Ç")
}

# ----- üÉè –ü–†–ï–î–ú–ï–¢–ò üÉè -----
RARITY_POWER = {'‚ö™Ô∏è –û–±—ã—á–Ω–∞—è': 1, 'üü¢ –†–µ–¥–∫–∞—è': 2, 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è': 3, 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è': 4, 'üü† –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è': 5, '‚öúÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω–∞—è': 10}
ITEMS = {
    'c1': {'name': '–ö–∞—Ä—Ç–∞ –ù–æ–≤–∏—á–∫–∞', 'rarity': '‚ö™Ô∏è –û–±—ã—á–Ω–∞—è', 'type': 'card', 'power': 1},
    'c2': {'name': '–¢–∞–ª–∏—Å–º–∞–Ω –£–¥–∞—á–∏', 'rarity': '‚ö™Ô∏è –û–±—ã—á–Ω–∞—è', 'type': 'card', 'power': 1},
    'c3': {'name': '–ü—Ä–æ–∫–ª—è—Ç—ã–π –î—É–±–ª–æ–Ω', 'rarity': '‚ö™Ô∏è –û–±—ã—á–Ω–∞—è', 'type': 'card', 'power': 1},
    'c4': {'name': '–ü—ã–ª—å–Ω—ã–π –°–≤–∏—Ç–æ–∫', 'rarity': '‚ö™Ô∏è –û–±—ã—á–Ω–∞—è', 'type': 'card', 'power': 1},
    'c5': {'name': '–î—Ä–µ–≤–Ω—è—è –ú–æ–Ω–µ—Ç–∞', 'rarity': 'üü¢ –†–µ–¥–∫–∞—è', 'type': 'card', 'power': 2},
    'c6': {'name': '–ö—Ä–∏—Å—Ç–∞–ª–ª –≠–Ω–µ—Ä–≥–∏–∏', 'rarity': 'üü¢ –†–µ–¥–∫–∞—è', 'type': 'card', 'power': 2},
    'c7': {'name': '–ó–µ–ª—å–µ –ò—Å—Ü–µ–ª–µ–Ω–∏—è', 'rarity': 'üü¢ –†–µ–¥–∫–∞—è', 'type': 'card', 'power': 2},
    'c8': {'name': '–ê–º—É–ª–µ—Ç –ó–∞—â–∏—Ç—ã', 'rarity': 'üü¢ –†–µ–¥–∫–∞—è', 'type': 'card', 'power': 2},
    'c9': {'name': '–ó–≤—ë–∑–¥–Ω–∞—è –ö–∞—Ä—Ç–∞', 'rarity': 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 3},
    'c10': {'name': '–≠—Å—Å–µ–Ω—Ü–∏—è –ë–æ–≥–∞—Ç—Å—Ç–≤–∞', 'rarity': 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 3},
    'c11': {'name': '–ü–ª–∞—â-–Ω–µ–≤–∏–¥–∏–º–∫–∞', 'rarity': 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 3},
    'c12': {'name': '–°–∞–ø–æ–≥–∏-—Å–∫–æ—Ä–æ—Ö–æ–¥—ã', 'rarity': 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 3},
    'c13': {'name': '–ö–æ—Ä–æ–Ω–∞ –ü—Ä–∞–≤–∏—Ç–µ–ª—è', 'rarity': 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'type': 'card', 'power': 4},
    'c14': {'name': '–û—Å–∫–æ–ª–æ–∫ –í—Å–µ–ª–µ–Ω–Ω–æ–π', 'rarity': 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'type': 'card', 'power': 4},
    'c15': {'name': '–ú–æ–ª–æ—Ç –¢–æ—Ä–∞', 'rarity': 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'type': 'card', 'power': 4},
    'c16': {'name': '–¢—Ä–µ–∑—É–±–µ—Ü –ü–æ—Å–µ–π–¥–æ–Ω–∞', 'rarity': 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'type': 'card', 'power': 4},
    'c17': {'name': '–°–µ—Ä–¥—Ü–µ –ì–∞–ª–∞–∫—Ç–∏–∫–∏', 'rarity': 'üü† –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 5},
    'c18': {'name': '–ü–µ—Ä–æ –§–µ–Ω–∏–∫—Å–∞', 'rarity': 'üü† –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 5},
    'c19': {'name': '–ö—Ä–æ–≤—å –ì—Ä–∏—Ñ–æ–Ω–∞', 'rarity': 'üü† –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è', 'type': 'card', 'power': 5},
    'c20': {'name': '–ö–∞—Ä—Ç–∞ COINVERSE', 'rarity': '‚öúÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω–∞—è', 'type': 'card', 'power': 10},
    'key1': {'name': '–ö–ª—é—á –æ—Ç –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã', 'rarity': 'üü¢ –†–µ–¥–∫–∞—è', 'type': 'item'},
    'fragment1': {'name': '–§—Ä–∞–≥–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã', 'rarity': '‚ö™Ô∏è –û–±—ã—á–Ω–∞—è', 'type': 'craft_item'},
    'exp_sphere': {'name': '–°—Ñ–µ—Ä–∞ –æ–ø—ã—Ç–∞', 'rarity': 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è', 'type': 'exp_item', 'xp': 50},
}

# ----- üéÅ –ö–ï–ô–°–ò üéÅ -----
CASES = {
    'rusty': {'name': 'üî© –†–∂–∞–≤—ã–π —è—â–∏–∫', 'cost': 100, 'currency': 'coins', 'prizes': [{'type': 'coins', 'amount': (10, 80), 'chance': 90}, {'type': 'item', 'item_id': 'fragment1', 'chance': 10}]},
    'bronze': {'name': 'ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å', 'cost': 500, 'currency': 'coins', 'prizes': [ {'type': 'coins', 'amount': (100, 450), 'chance': 65}, {'type': 'item', 'item_id': 'c1', 'chance': 15}, {'type': 'item', 'item_id': 'c2', 'chance': 15}, {'type': 'item', 'item_id': 'key1', 'chance': 5},]},
    'silver': {'name': 'ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å', 'cost': 2500, 'currency': 'coins', 'prizes': [ {'type': 'coins', 'amount': (1000, 2200), 'chance': 55}, {'type': 'stars', 'amount': (1, 3), 'chance': 15}, {'type': 'item', 'item_id': 'c3', 'chance': 15}, {'type': 'item', 'item_id': 'c5', 'chance': 10}, {'type': 'item', 'item_id': 'key1', 'chance': 5},]},
    'gold':   {'name': 'ü•á –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å', 'cost': 10, 'currency': 'stars', 'prizes': [ {'type': 'coins', 'amount': (15000, 25000), 'chance': 50}, {'type': 'item', 'item_id': 'c7', 'chance': 40}, {'type': 'item', 'item_id': 'c9', 'chance': 9}, {'type': 'item', 'item_id': 'c10', 'chance': 1},]},
    'treasure': {'name': 'üíé –ö–µ–π—Å –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã', 'cost': 1, 'currency': 'key1', 'prizes': [ {'type': 'stars', 'amount': (10, 25), 'chance': 50}, {'type': 'item', 'item_id': 'c8', 'chance': 30}, {'type': 'item', 'item_id': 'c10', 'chance': 20},]},
    'diamond': {'name': 'üíé –ê–ª–º–∞–∑–Ω—ã–π –∫–µ–π—Å', 'cost': 50, 'currency': 'stars', 'prizes': [ {'type': 'stars', 'amount': (25, 45), 'chance': 50}, {'type': 'item', 'item_id': 'c10', 'chance': 25}, {'type': 'item', 'item_id': 'exp_sphere', 'chance': 25},]},
    'legendary': {'name': 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ª–∞—Ä–µ—Ü', 'cost': 25, 'currency': 'stars', 'prizes': [{'type': 'item', 'item_id': 'c13', 'chance': 40}, {'type': 'item', 'item_id': 'c14', 'chance': 30}, {'type': 'item', 'item_id': 'c15', 'chance': 30}]},
}

# ----- üìú –ö–í–ï–°–¢–ò üìú -----
QUESTS = {
    'open_case': {'name': '–û—Ç–∫—Ä–æ–π—Ç–µ 3 –∫–µ–π—Å–∞', 'target': 3, 'xp': 20},
    'play_casino': {'name': '–°—ã–≥—Ä–∞–π—Ç–µ –≤ –∫–∞–∑–∏–Ω–æ 5 —Ä–∞–∑', 'target': 5, 'xp': 15},
    'invite_friend': {'name': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 1 –¥—Ä—É–≥–∞', 'target': 1, 'xp': 50}
}

# ----- üèÜ BATTLE PASS üèÜ -----
BP_LEVELS = {i: {'xp': i * 50, 'free_reward': {'type': 'coins', 'amount': i * 500}, 'premium_reward': {'type': 'stars', 'amount': i}} for i in range(1, 21)}
BP_LEVELS[5]['premium_reward'] = {'type': 'item', 'item_id': 'key1'}
BP_LEVELS[10]['premium_reward'] = {'type': 'item', 'item_id': 'c7'}
BP_LEVELS[20]['premium_reward'] = {'type': 'item', 'item_id': 'c10'}

# ----- –ë–∞–∑–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -----
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()
main_router = Router()

# ----- FSM –°—Ç–µ–π–Ω–∏ -----
class AdminStates(StatesGroup):
    get_user_id_for_balance, get_currency_type, get_amount = State(), State(), State()
    get_user_id_for_stats = State()
    get_message_for_mass_send, confirm_mass_send = State(), State()
    giveaway_currency, giveaway_amount, giveaway_confirm = State(), State(), State()

class CasinoStates(StatesGroup):
    get_bet_dice, get_bet_slots, get_card_for_duel = State(), State(), State()

class ExchangeStates(StatesGroup):
    amount = State()

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

def escape_markdown(text: str) -> str:
    if not isinstance(text, str): return ""
    return text.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')

# ----- üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• üóÑÔ∏è -----
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, username TEXT, coins INTEGER DEFAULT 0, stars INTEGER DEFAULT 0,
            total_coins_earned INTEGER DEFAULT 0, rank_level INTEGER DEFAULT 1,
            daily_bonus_streak INTEGER DEFAULT 0, last_bonus_date TEXT,
            referrer_id INTEGER, join_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            bp_level INTEGER DEFAULT 1, bp_xp INTEGER DEFAULT 0, has_premium_bp INTEGER DEFAULT 0
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, item_id TEXT,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS quests (
            user_id INTEGER, quest_id TEXT, progress INTEGER DEFAULT 0, last_reset_date TEXT,
            PRIMARY KEY (user_id, quest_id)
        )""")
        user_columns = [i[1] for i in cursor.execute("PRAGMA table_info(users)").fetchall()]
        if 'referrer_id' not in user_columns: cursor.execute("ALTER TABLE users ADD COLUMN referrer_id INTEGER")
        if 'bp_level' not in user_columns: cursor.execute("ALTER TABLE users ADD COLUMN bp_level INTEGER DEFAULT 1")
        if 'bp_xp' not in user_columns: cursor.execute("ALTER TABLE users ADD COLUMN bp_xp INTEGER DEFAULT 0")
        if 'has_premium_bp' not in user_columns: cursor.execute("ALTER TABLE users ADD COLUMN has_premium_bp INTEGER DEFAULT 0")
        conn.commit()

# ----- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î —Ç–∞ –ª–æ–≥—ñ–∫–æ—é -----
async def get_user(user_id):
    with sqlite3.connect(DB_NAME) as conn:
        conn.row_factory = sqlite3.Row; cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone()

async def add_user(user_id, username, referrer_id=None):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        start_coins = REFERRED_BONUS if referrer_id else START_COINS
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username, coins, total_coins_earned, referrer_id) VALUES (?, ?, ?, ?, ?)", (user_id, username or "–ë–µ–∑ –∏–º–µ–Ω–∏", start_coins, start_coins, referrer_id))
    if referrer_id:
        await update_quest_progress(referrer_id, 'invite_friend')

async def update_balance(user_id, coins=0, stars=0, earned=False):
    current_data = await get_user(user_id)
    if not current_data: return
    new_coins, new_stars = current_data['coins'] + coins, current_data['stars'] + stars
    new_total_earned = current_data['total_coins_earned'] + coins if earned and coins > 0 else current_data['total_coins_earned']
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET coins = ?, stars = ?, total_coins_earned = ? WHERE user_id = ?", (new_coins, new_stars, new_total_earned, user_id))
    await check_and_update_rank(user_id, new_total_earned)

async def add_item_to_inventory(user_id, item_id, quantity=1):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        for _ in range(quantity):
            cursor.execute("INSERT INTO inventory (user_id, item_id) VALUES (?, ?)", (user_id, item_id))

async def remove_item_from_inventory(user_id, item_id, quantity=1):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM inventory WHERE id IN (SELECT id FROM inventory WHERE user_id = ? AND item_id = ? LIMIT ?)", (user_id, item_id, quantity))

async def get_user_inventory(user_id):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT item_id, COUNT(item_id) as count FROM inventory WHERE user_id = ? GROUP BY item_id", (user_id,))
        return cursor.fetchall()

async def check_and_update_rank(user_id, total_coins_earned):
    current_user = await get_user(user_id);
    if not current_user: return
    current_rank_level = current_user['rank_level']
    new_rank_level = current_rank_level
    for level, (required_coins, _) in sorted(RANKS.items(), reverse=True):
        if required_coins is not None and total_coins_earned >= required_coins: new_rank_level = level; break
    if new_rank_level > current_rank_level:
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET rank_level = ? WHERE user_id = ?", (new_rank_level, user_id))
        _, rank_name = RANKS[new_rank_level]
        try: await bot.send_message(user_id, f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞: **{rank_name}**!")
        except: pass# ----- üìú –ö–í–ï–°–¢–ò –∏ –ë–ê–¢–õ –ü–ê–°–° üìú -----
async def get_or_create_quest(user_id, quest_id):
    today = str(date.today())
    with sqlite3.connect(DB_NAME) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM quests WHERE user_id = ? AND quest_id = ?", (user_id, quest_id))
        quest_data = cursor.fetchone()
        if not quest_data or quest_data['last_reset_date'] != today:
            cursor.execute("INSERT OR REPLACE INTO quests (user_id, quest_id, progress, last_reset_date) VALUES (?, ?, 0, ?)", (user_id, quest_id, today))
            conn.commit()
            cursor.execute("SELECT * FROM quests WHERE user_id = ? AND quest_id = ?", (user_id, quest_id))
            quest_data = cursor.fetchone()
        return quest_data

async def check_quest_completion(user_id, quest_id):
    quest = await get_or_create_quest(user_id, quest_id)
    quest_info = QUESTS[quest_id]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–≤–µ—Å—Ç –≤–∂–µ –±—É–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT progress FROM quests WHERE user_id = ? AND quest_id = ?", (user_id, quest_id))
        current_progress = cursor.fetchone()[0]

    # –Ø–∫—â–æ –ø—Ä–æ–≥—Ä–µ—Å –≤–∂–µ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if current_progress < quest_info['target']:
        return

    # –Ø–∫—â–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π, –∞–ª–µ –Ω–∞–≥–æ—Ä–æ–¥–∞ –≤–∂–µ –≤–∏–¥–∞–Ω–∞ (–∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—ñ–π –≤–∏–¥–∞—á—ñ)
    # –¶—é –ª–æ–≥—ñ–∫—É –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏, –¥–æ–¥–∞–≤—à–∏ –ø–æ–ª–µ is_completed –≤ –ë–î, –∞–ª–µ –ø–æ–∫–∏ —â–æ —Ç–∞–∫
    
    await add_xp(user_id, quest_info['xp'])
    try:
        await bot.send_message(user_id, f"‚úÖ –ö–≤–µ—Å—Ç *'{quest_info['name']}'* –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{quest_info['xp']} XP**.")
    except:
        pass


async def update_quest_progress(user_id, quest_id, value=1):
    quest = await get_or_create_quest(user_id, quest_id)
    quest_info = QUESTS[quest_id]

    if quest['progress'] < quest_info['target']:
        new_progress = quest['progress'] + value
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE quests SET progress = ? WHERE user_id = ? AND quest_id = ?", (new_progress, user_id, quest_id))
        
        if new_progress >= quest_info['target']:
            await check_quest_completion(user_id, quest_id)

async def add_xp(user_id, xp_to_add):
    user = await get_user(user_id)
    if not user: return
    
    new_xp = user['bp_xp'] + xp_to_add
    new_level = user['bp_level']
    
    while BP_LEVELS.get(new_level) and new_xp >= BP_LEVELS[new_level]['xp']:
        new_xp -= BP_LEVELS[new_level]['xp']
        
        # –í–∏–¥–∞—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
        free_rew = BP_LEVELS[new_level]['free_reward']
        if free_rew['type'] == 'coins': await update_balance(user_id, coins=free_rew['amount'])
        elif free_rew['type'] == 'item': await add_item_to_inventory(user_id, free_rew['item_id'])
        
        if user['has_premium_bp']:
            prem_rew = BP_LEVELS[new_level]['premium_reward']
            if prem_rew['type'] == 'stars': await update_balance(user_id, stars=prem_rew['amount'])
            elif prem_rew['type'] == 'item': await add_item_to_inventory(user_id, prem_rew['item_id'])

        new_level += 1
        try:
            await bot.send_message(user_id, f"üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **{new_level}** —É—Ä–æ–≤–Ω—è –ë–æ–µ–≤–æ–≥–æ –ü—Ä–æ–ø—É—Å–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!")
        except: pass

    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET bp_level = ?, bp_xp = ? WHERE user_id = ?", (new_level, new_xp, user_id))


# ----- üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–ù–ê–õ üõ°Ô∏è -----
class SponsorshipMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message | CallbackQuery, data):
        user_id = event.from_user.id
        if ADMIN_IDS and str(user_id) in ADMIN_IDS:
            if not await get_user(user_id): await add_user(user_id, event.from_user.username)
            return await handler(event, data)
        if not SPONSOR_CHANNEL:
            if not await get_user(user_id): await add_user(user_id, event.from_user.username)
            return await handler(event, data)
        try:
            member = await bot.get_chat_member(chat_id=SPONSOR_CHANNEL, user_id=user_id)
            if member.status in ['member', 'administrator', 'creator']:
                if not await get_user(user_id):
                    referrer_id = None
                    if isinstance(event, Message) and event.text and event.text.startswith("/start"):
                        args = event.text.split()
                        if len(args) > 1 and args[1].isdigit() and int(args[1]) != user_id: referrer_id = int(args[1])
                    await add_user(user_id, event.from_user.username, referrer_id)
                return await handler(event, data)
            else: raise ValueError("User is not a member.")
        except:
            try:
                channel_info = await bot.get_chat(SPONSOR_CHANNEL)
                channel_link = channel_info.invite_link or f"https://t.me/{channel_info.username}"
            except:
                logging.error(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª: {SPONSOR_CHANNEL}.")
                error_text = "üîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.";
                if isinstance(event, Message): await event.answer(error_text)
                elif isinstance(event, CallbackQuery): await event.message.answer(error_text)
                return
            kb = InlineKeyboardBuilder(); kb.button(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link); kb.button(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
            text = f"üõë **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!**\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª-—Å–ø–æ–Ω—Å–æ—Ä:\n**{escape_markdown(channel_info.title)}**\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'."
            if isinstance(event, Message): await event.answer(text, reply_markup=kb.as_markup())
            elif isinstance(event, CallbackQuery): await event.message.answer(text, reply_markup=kb.as_markup()); await event.answer()

# ----- ‚å®Ô∏è –ö–õ–ê–í–ò–ê–¢–£–†–´ ‚å®Ô∏è -----
def get_main_menu_keyboard():
    b = InlineKeyboardBuilder()
    b.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu:profile"); b.button(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="menu:inventory")
    b.button(text="üéÅ –ö–µ–π—Å—ã", callback_data="menu:cases"); b.button(text="üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="menu:games")
    b.button(text="üìú –ö–≤–µ—Å—Ç—ã", callback_data="menu:quests"); b.button(text="üèÜ –ë–æ–µ–≤–æ–π –ü—Ä–æ–ø—É—Å–∫", callback_data="menu:battle_pass")
    b.button(text="üí± –û–±–º–µ–Ω", callback_data="menu:exchange"); b.button(text="üóìÔ∏è –ë–æ–Ω—É—Å", callback_data="menu:daily_bonus")
    b.button(text="üèÜ –¢–æ–ø—ã", callback_data="menu:tops"); b.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="menu:referral")
    b.button(text="‚úçÔ∏è –û—Ç–∑—ã–≤—ã", callback_data="menu:feedback"); b.button(text="üõ†Ô∏è –ö—Ä–∞—Ñ—Ç", callback_data="menu:craft")
    b.adjust(2); return b.as_markup()

def get_back_button(cb="menu:main"):
    b = InlineKeyboardBuilder(); b.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=cb); return b.as_markup()

# ----- –û–°–ù–û–í–ù–Ü –û–ë–†–û–ë–ß–ò–ö–ò -----
@main_router.message(CommandStart())
async def cmd_start(message: Message):
    referrer_id = None
    args = message.text.split()
    if len(args) > 1 and args[1].isdigit():
        if int(args[1]) != message.from_user.id: referrer_id = int(args[1])
    
    user_exists = await get_user(message.from_user.id)
    if not user_exists:
        await add_user(message.from_user.id, message.from_user.username, referrer_id)
        bonus = REFERRED_BONUS if referrer_id else START_COINS
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {escape_markdown(message.from_user.first_name)}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: **{bonus}** –º–æ–Ω–µ—Ç!", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {escape_markdown(message.from_user.first_name)}!", reply_markup=get_main_menu_keyboard())@main_router.callback_query(F.data == "check_subscription")
async def cb_check_subscription(callback: CallbackQuery): await callback.message.delete(); await cmd_start(callback.message)

@main_router.callback_query(F.data == "menu:main")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear(); await callback.message.edit_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

@main_router.message(F.text.lower().in_(["–æ—Ç–º–µ–Ω–∞", "/cancel"]), StateFilter("*"))
async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    if str(message.from_user.id) in ADMIN_IDS: await cmd_admin_panel(message, state)
    else: await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

# ----- üéí –Ü–ù–í–ï–ù–¢–ê–† –¢–ê –ö–†–ê–§–¢ üõ†Ô∏è -----
@main_router.callback_query(F.data == "menu:inventory")
async def cb_inventory(callback: CallbackQuery):
    user_inventory = await get_user_inventory(callback.from_user.id)
    if not user_inventory:
        return await callback.message.edit_text("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.\n\n_–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã!_", reply_markup=get_back_button())
    
    text = "üéí *–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n\n"
    items_by_type = {'item': [], 'card': [], 'craft_item': []}
    for item_id, count in user_inventory:
        item_info = ITEMS.get(item_id)
        if item_info:
            items_by_type.setdefault(item_info.get('type', 'item'), []).append((item_id, count, item_info))

    if items_by_type['item']:
        text += "*–ü—Ä–µ–¥–º–µ—Ç—ã:*\n"
        for item_id, count, item_info in items_by_type['item']:
            text += f"  - {item_info['name']} - {count} —à—Ç.\n"
        text += "\n"
        
    if items_by_type['craft_item']:
        text += "*–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:*\n"
        for item_id, count, item_info in items_by_type['craft_item']:
            text += f"  - {item_info['name']} - {count} —à—Ç.\n"
        text += "\n"

    if items_by_type['card']:
        text += "*–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:*\n"
        rarity_order = ['‚ö™Ô∏è –û–±—ã—á–Ω–∞—è', 'üü¢ –†–µ–¥–∫–∞—è', 'üîµ –≠–ø–∏—á–µ—Å–∫–∞—è', 'üü£ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'üü† –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è', '‚öúÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω–∞—è']
        sorted_cards = sorted(items_by_type['card'], key=lambda x: rarity_order.index(x[2]['rarity']))
        for card_id, count, card_info in sorted_cards:
            text += f"  - {card_info['rarity']} *{card_info['name']}* - {count} —à—Ç.\n"
    
    await callback.message.edit_text(text, reply_markup=get_back_button())
    
@main_router.callback_query(F.data == "menu:craft")
async def cb_craft_menu(callback: CallbackQuery):
    user_inventory = await get_user_inventory(callback.from_user.id)
    fragment_count = next((count for item_id, count in user_inventory if item_id == 'fragment1'), 0)
    
    kb = InlineKeyboardBuilder()
    text = "üõ†Ô∏è *–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –ö—Ä–∞—Ñ—Ç–∞*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n"
    text += f"–£ –≤–∞—Å –µ—Å—Ç—å **{fragment_count}** —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç.\n\n"
    
    if fragment_count >= 10:
        text += "–°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–¥–∫—É—é –∫–∞—Ä—Ç—É (—Ç—Ä–µ–±—É–µ—Ç—Å—è 10 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)."
        kb.button(text="–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É (10 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)", callback_data="craft:rare_card")
    else:
        text += f"–ù—É–∂–Ω–æ –µ—â–µ **{10 - fragment_count}** —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–¥–∫—É—é –∫–∞—Ä—Ç—É."
        
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

@main_router.callback_query(F.data == "craft:rare_card")
async def cb_craft_rare_card(callback: CallbackQuery):
    user_inventory = await get_user_inventory(callback.from_user.id)
    fragment_count = next((count for item_id, count in user_inventory if item_id == 'fragment1'), 0)
    
    if fragment_count < 10:
        return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤!", show_alert=True)
    
    await remove_item_from_inventory(callback.from_user.id, 'fragment1', 10)
    
    rare_cards = [cid for cid, cinfo in ITEMS.items() if cinfo.get('rarity') == 'üü¢ –†–µ–¥–∫–∞—è' and cinfo.get('type') == 'card']
    crafted_card_id = random.choice(rare_cards)
    await add_item_to_inventory(callback.from_user.id, crafted_card_id)
    
    await callback.answer("‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–∞—Ä—Ç—É! ‚ú®", show_alert=True)
    await callback.message.answer(f"–í—ã —Å–æ–∑–¥–∞–ª–∏: *{ITEMS[crafted_card_id]['rarity']} {ITEMS[crafted_card_id]['name']}*")
    await cb_craft_menu(callback)

# ----- ü§ù –†–ï–§–ï–†–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê –¢–ê –í–Ü–î–ì–£–ö–ò ‚úçÔ∏è -----
@main_router.callback_query(F.data == "menu:referral")
async def cb_referral(callback: CallbackQuery):
    me = await bot.get_me()
    referral_link = f"https://t.me/{me.username}?start={callback.from_user.id}"
    text = (f"ü§ù *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!* \n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ö–æ–≥–¥–∞ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –Ω–µ–π, –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:\n\n"
            f"- *–í—ã –ø–æ–ª—É—á–∏—Ç–µ:* **{REFERRAL_BONUS:,}** –º–æ–Ω–µ—Ç üí∞\n"
            f"- *–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç:* **{REFERRED_BONUS:,}** –º–æ–Ω–µ—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ! üí∏\n\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`{referral_link}`")
    await callback.message.edit_text(text, reply_markup=get_back_button())

@main_router.callback_query(F.data == "menu:feedback")
async def cb_feedback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackState.waiting_for_feedback)
    await callback.message.edit_text(
        "‚úçÔ∏è *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∏–¥–µ—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
        "_–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –∏–ª–∏ /cancel_",
        reply_markup=get_back_button())

@main_router.message(FeedbackState.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext):
    await state.clear()
    feedback_text = (f"üì¨ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!* (ID: `{message.from_user.id}`)\n\n"
                     f"–¢–µ–∫—Å—Ç:\n_{escape_markdown(message.text)}_")
    if ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            try: await bot.send_message(admin_id, feedback_text)
            except Exception as e: logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=get_main_menu_keyboard())

# ----- üíª –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ üíª -----
@main_router.message(Command("admin"))
async def cmd_admin_panel(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMIN_IDS: return
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∏ –í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å", callback_data="admin:edit_balance")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞", callback_data="admin:check_user")
    kb.button(text="üöÅ –†–∞–∑–¥–∞—á–∞ –≤—Å–µ–º", callback_data="admin:giveaway")
    kb.button(text="üìà –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:global_stats")
    kb.button(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin:mass_send")
    kb.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
    kb.adjust(1)
    await message.answer("üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**", reply_markup=kb.as_markup())

@main_router.callback_query(F.data == "admin:main_panel")
async def cb_admin_panel_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await cmd_admin_panel(callback.message, state)

@main_router.message(Command("give"))
async def cmd_give_by_reply(message: Message):
    if str(message.from_user.id) not in ADMIN_IDS: return
    if not message.reply_to_message:
        return await message.reply("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    try:
        parts = message.text.split()
        currency = parts[1].lower()
        amount_str = parts[2]
        
        target_id = message.reply_to_message.from_user.id
        target_user = await get_user(target_id)
        if not target_user: return await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.")
        safe_username = escape_markdown(message.reply_to_message.from_user.username or "–ë–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞")
        if currency in ["–º–æ–Ω–µ—Ç—ã", "coins"]:
            amount = int(amount_str)
            await update_balance(target_id, coins=amount, earned=(amount > 0))
            await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {amount} –º–æ–Ω–µ—Ç –¥–ª—è @{safe_username}.")
        elif currency in ["–∑–≤–µ–∑–¥—ã", "stars"]:
            amount = int(amount_str)
            await update_balance(target_id, stars=amount)
            await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {amount} –∑–≤—ë–∑–¥–æ—á–µ–∫ –¥–ª—è @{safe_username}.")
        elif currency in ["item", "–ø—Ä–µ–¥–º–µ—Ç"]:
            item_id = amount_str
            if item_id not in ITEMS: return await message.reply(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç —Å ID '{item_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await add_item_to_inventory(target_id, item_id)
            await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç '{ITEMS[item_id]['name']}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{safe_username}.")
        else: await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–º–æ–Ω–µ—Ç—ã', '–∑–≤–µ–∑–¥—ã' –∏–ª–∏ '–ø—Ä–µ–¥–º–µ—Ç'.")
    except: await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ü—Ä–∏–º–µ—Ä: `/give –º–æ–Ω–µ—Ç—ã 10000` –∏–ª–∏ `/give item key1`")# ----- –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨: –õ–û–ì–Ü–ö–ê –ö–ù–û–ü–û–ö -----
@main_router.callback_query(F.data == "admin:global_stats")
async def admin_global_stats(callback: CallbackQuery):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(user_id) FROM users"); total_users = cursor.fetchone()[0]
        cursor.execute("SELECT SUM(coins) FROM users"); total_coins = cursor.fetchone()[0] or 0
        cursor.execute("SELECT SUM(stars) FROM users"); total_stars = cursor.fetchone()[0] or 0
        cursor.execute("SELECT COUNT(id) FROM inventory"); total_items = cursor.fetchone()[0]
    
    text = (f"üìà *–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
            f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
            f"üí∞ *–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ:* {total_coins:,}\n"
            f"‚≠ê *–í—Å–µ–≥–æ –∑–≤—ë–∑–¥–æ—á–µ–∫ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ:* {total_stars:,}\n"
            f"üÉè *–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è—Ö:* {total_items:,}")
    await callback.message.edit_text(text, reply_markup=get_back_button("admin:main_panel"))
    
@main_router.callback_query(F.data == "admin:giveaway")
async def admin_giveaway_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.giveaway_currency)
    kb = InlineKeyboardBuilder(); kb.button(text="üí∞ –ú–æ–Ω–µ—Ç—ã", callback_data="giveaway:coins"); kb.button(text="‚≠ê –ó–≤—ë–∑–¥–æ—á–∫–∏", callback_data="giveaway:stars")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Ä–∞–∑–¥–∞—á–∏:", reply_markup=kb.as_markup())

@main_router.callback_query(F.data.startswith("giveaway:"), AdminStates.giveaway_currency)
async def admin_giveaway_currency(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.split(":")[1]; await state.update_data(currency=currency)
    await state.set_state(AdminStates.giveaway_amount)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ({'–º–æ–Ω–µ—Ç' if currency == 'coins' else '–∑–≤—ë–∑–¥–æ—á–µ–∫'}), –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")

@main_router.message(AdminStates.giveaway_amount)
async def admin_giveaway_amount(message: Message, state: FSMContext):
    if not message.text.isdigit(): return await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    amount = int(message.text); await state.update_data(amount=amount); data = await state.get_data()
    currency_name = "–º–æ–Ω–µ—Ç" if data['currency'] == 'coins' else '–∑–≤—ë–∑–¥–æ—á–µ–∫'
    await state.set_state(AdminStates.giveaway_confirm)
    kb = InlineKeyboardBuilder(); kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="giveaway_confirm:yes"); kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="giveaway_confirm:no")
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–¥–∞—Ç—å –ø–æ **{amount}** {currency_name} **–ö–ê–ñ–î–û–ú–£** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?", reply_markup=kb.as_markup())

@main_router.callback_query(F.data.startswith("giveaway_confirm:"), AdminStates.giveaway_confirm)
async def admin_giveaway_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.data.endswith("no"):
        await state.clear(); return await callback.message.edit_text("–†–∞–∑–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_back_button("admin:main_panel"))
    
    data = await state.get_data(); currency, amount = data['currency'], data['amount']
    await state.clear()
    await callback.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET {currency} = {currency} + ?", (amount,))
        if currency == 'coins': cursor.execute("UPDATE users SET total_coins_earned = total_coins_earned + ?", (amount,))
        conn.commit()
        
    await callback.message.edit_text("‚úÖ –†–∞–∑–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_back_button("admin:main_panel"))

@main_router.callback_query(F.data == "admin:edit_balance")
async def admin_edit_balance_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.get_user_id_for_balance); await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._")

@main_router.message(AdminStates.get_user_id_for_balance)
async def admin_edit_balance_get_id(message: Message, state: FSMContext):
    if not message.text.isdigit(): return await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    target_id = int(message.text)
    if not await get_user(target_id):
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        await state.clear(); return await cmd_admin_panel(message, state)
    await state.update_data(target_id=target_id); await state.set_state(AdminStates.get_currency_type)
    kb = InlineKeyboardBuilder(); kb.button(text="üí∞ –ú–æ–Ω–µ—Ç—ã", callback_data="admin_edit:coins"); kb.button(text="‚≠ê –ó–≤—ë–∑–¥–æ—á–∫–∏", callback_data="admin_edit:stars"); kb.button(text="üÉè –ü—Ä–µ–¥–º–µ—Ç", callback_data="admin_edit:item")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=kb.as_markup())

@main_router.callback_query(F.data.startswith("admin_edit:"), AdminStates.get_currency_type)
async def admin_edit_balance_get_type(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.split(":")[1]; await state.update_data(currency=currency); await state.set_state(AdminStates.get_amount)
    prompt = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è -100)" if currency != 'item' else "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –º–∏–Ω—É—Å–æ–º: -key1)"
    await callback.message.edit_text(f"{prompt}.\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._")

@main_router.message(AdminStates.get_amount)
async def admin_edit_balance_get_amount(message: Message, state: FSMContext):
    data = await state.get_data(); target_id, currency = data['target_id'], data['currency']
    if currency == 'item':
        item_id = message.text
        if item_id.startswith('-'):
            item_to_remove = item_id[1:]
            if item_to_remove not in ITEMS: return await message.reply(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç —Å ID '{item_to_remove}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await remove_item_from_inventory(target_id, item_to_remove)
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω 1 –ø—Ä–µ–¥–º–µ—Ç '{ITEMS[item_to_remove]['name']}' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
        else:
            if item_id not in ITEMS: return await message.reply(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç —Å ID '{item_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await add_item_to_inventory(target_id, item_id)
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç '{ITEMS[item_id]['name']}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")
    else:
        try: amount = int(message.text)
        except ValueError: return await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        if currency == "coins": await update_balance(target_id, coins=amount, earned=(amount > 0)); await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount}.")
        elif currency == "stars": await update_balance(target_id, stars=amount); await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount}.")
    await state.clear(); await cmd_admin_panel(message, state)
    
@main_router.callback_query(F.data == "admin:check_user")
async def admin_check_user_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.get_user_id_for_stats); await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username.\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._")

@main_router.message(AdminStates.get_user_id_for_stats)
async def admin_show_user_stats(message: Message, state: FSMContext):
    user_id, user = None, None
    user_data_input = message.text
    if user_data_input.isdigit(): user_id = int(user_data_input); user = await get_user(user_id)
    elif user_data_input.startswith('@'):
        username_to_find = user_data_input[1:]
        with sqlite3.connect(DB_NAME) as conn:
            conn.row_factory = sqlite3.Row; cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE username = ?", (username_to_find,)); user = cursor.fetchone()
            if user: user_id = user['user_id']
    else: await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."); await state.clear(); await cmd_admin_panel(message, state); return
    if not user: await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        inventory_items = await get_user_inventory(user_id)
        inventory_text = "\n\n*–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n"
        if not inventory_items: inventory_text += "_–ü—É—Å—Ç–æ_"
        else:
            for item_id, count in inventory_items:
                inventory_text += f" - {ITEMS.get(item_id, {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'})['name']} ({item_id}) x{count}\n"
        safe_username = escape_markdown(user['username'])
        stats_text = (f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ID `{user_id}`**\n\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{safe_username}\n–ú–æ–Ω–µ—Ç—ã: {user['coins']:,}\n–ó–≤—ë–∑–¥–æ—á–∫–∏: {user['stars']:,}\n–†–∞–Ω–≥: {RANKS[user['rank_level']][1]}"
                      f"{inventory_text}")
        await message.answer(stats_text)
    await state.clear(); await cmd_admin_panel(message, state)

@main_router.callback_query(F.data == "admin:mass_send")
async def admin_mass_send_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.get_message_for_mass_send); await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._")

@main_router.message(AdminStates.get_message_for_mass_send)
async def admin_mass_send_get_msg(message: Message, state: FSMContext):
    await state.update_data(chat_id=message.chat.id, message_id=message.message_id)
    await state.set_state(AdminStates.confirm_mass_send)
    kb = InlineKeyboardBuilder(); kb.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_yes"); kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="send_no")
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=kb.as_markup()); await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=message.message_id)

@main_router.callback_query(F.data.in_({"send_yes", "send_no"}), AdminStates.confirm_mass_send)
async def admin_mass_send_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "send_no":
        await state.clear(); await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."); await cmd_admin_panel(callback.message, state); return
    await state.clear(); await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor(); cursor.execute("SELECT user_id FROM users"); user_ids = cursor.fetchall()
    sent_count, failed_count = 0, 0
    for (user_id,) in user_ids:
        try: await bot.copy_message(chat_id=user_id, from_chat_id=data['chat_id'], message_id=data['message_id']); sent_count += 1; await asyncio.sleep(0.1)
        except: failed_count += 1
    await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"); await cmd_admin_panel(callback.message, state)

# ----- üéÆ –†–û–ó–í–ê–ì–ò üéÆ -----
@main_router.callback_query(F.data == "menu:games")
async def cb_games_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder(); kb.button(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="game:dice"); kb.button(text="üé∞ –°–ª–æ—Ç—ã", callback_data="game:slots"); kb.button(text="üÉè –î—É—ç–ª—å –ö–∞—Ä—Ç", callback_data="game:duel")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"); kb.adjust(2,1); await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ:", reply_markup=kb.as_markup())

@main_router.callback_query(F.data == "game:dice")
async def cb_game_dice(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CasinoStates.get_bet_dice); await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–º–∏–Ω. {MIN_BET}).\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._")

@main_router.message(CasinoStates.get_bet_dice)
async def process_dice_bet(message: Message, state: FSMContext):
    if not message.text.isdigit(): return await message.reply("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    bet = int(message.text)
    if bet < MIN_BET: return await message.reply(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET}.")
    user = await get_user(message.from_user.id)
    if user['coins'] < bet: return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
    await state.clear(); await update_balance(message.from_user.id, coins=-bet); await update_quest_progress(message.from_user.id, 'play_casino')
    await message.reply("–ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏...")
    await asyncio.sleep(1); user_dice = await message.answer_dice(); user_roll = user_dice.dice.value
    await asyncio.sleep(3); bot_dice = await message.answer_dice(); bot_roll = bot_dice.dice.value
    win_amount = bet * 2
    if user_roll > bot_roll:
        await update_balance(message.from_user.id, coins=win_amount, earned=True)
        await message.reply(f"üéâ **–í—ã –ø–æ–±–µ–¥–∏–ª–∏!** ({user_roll} vs {bot_roll})\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{win_amount}** –º–æ–Ω–µ—Ç!")
    elif bot_roll > user_roll: await message.reply(f"üòï **–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...** ({user_roll} vs {bot_roll})\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ **{bet}** –º–æ–Ω–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞.")
    else: await update_balance(message.from_user.id, coins=bet); await message.reply(f"ü§ù **–ù–∏—á—å—è!** ({user_roll} vs {bot_roll})\n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")

@main_router.callback_query(F.data == "game:slots")
async def cb_game_slots(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CasinoStates.get_bet_slots); await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–º–∏–Ω. {MIN_BET}).\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._")

@main_router.message(CasinoStates.get_bet_slots)
async def process_slots_bet(message: Message, state: FSMContext):
    if not message.text.isdigit(): return await message.reply("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    bet = int(message.text)
    if bet < MIN_BET: return await message.reply(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET}.")
    user = await get_user(message.from_user.id);
    if user['coins'] < bet: return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
    await state.clear(); await update_balance(message.from_user.id, coins=-bet); await update_quest_progress(message.from_user.id, 'play_casino')
    slots = ["üçì", "üçã", "üçÄ", "üíé", "BAR"]; reels = [random.choice(slots) for _ in range(3)]
    result_msg = await message.answer(f"–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n[‚ùì] [‚ùì] [‚ùì]")
    await asyncio.sleep(1); await result_msg.edit_text(f"–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n[{reels[0]}] [‚ùì] [‚ùì]")
    await asyncio.sleep(1); await result_msg.edit_text(f"–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n[{reels[0]}] [{reels[1]}] [‚ùì]")
    await asyncio.sleep(1); await result_msg.edit_text(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n[{reels[0]}] [{reels[1]}] [{reels[2]}]")
    win = 0
    if reels[0] == reels[1] == reels[2]: win = {'üíé': bet * 25, 'BAR': bet * 15, 'üçÄ': bet * 10}.get(reels[0], bet * 5)
    elif reels[0] == reels[1] or reels[1] == reels[2]: win = {'üíé': bet * 3}.get(reels[1], bet * 2)
    if win > 0: await update_balance(message.from_user.id, coins=win, earned=True); await message.answer(f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{win}** –º–æ–Ω–µ—Ç!")
    else: await message.answer("üòï –£–≤—ã, –Ω–µ –ø–æ–≤–µ–∑–ª–æ.")
    
@main_router.callback_query(F.data == "game:duel")
async def cb_game_duel(callback: CallbackQuery):
    user_inventory = await get_user_inventory(callback.from_user.id)
    card_items = [item for item in user_inventory if ITEMS.get(item[0], {}).get('type') == 'card']
    if not card_items: return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –¥—É—ç–ª–∏!", show_alert=True)
    
    kb = InlineKeyboardBuilder()
    for card_id, count in card_items:
        kb.button(text=f"{ITEMS[card_id]['name']} ({count} —à—Ç.)", callback_data=f"duel_card:{card_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:games"); kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –¥—É—ç–ª–∏:", reply_markup=kb.as_markup())

@main_router.callback_query(F.data.startswith("duel_card:"))
async def process_card_duel(callback: CallbackQuery):
    user_card_id = callback.data.split(":")[1]; user_card = ITEMS[user_card_id]
    
    await remove_item_from_inventory(callback.from_user.id, user_card_id, 1)

    bot_card_id = random.choice([cid for cid, cinfo in ITEMS.items() if cinfo['type'] == 'card'])
    bot_card = ITEMS[bot_card_id]
    
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{user_card['name']}* ({user_card['rarity']})\n–ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É...")
    await asyncio.sleep(2)
    
    result_text = f"–í—ã: *{user_card['name']}* (–°–∏–ª–∞: {user_card['power']})\n–ë–æ—Ç: *{bot_card['name']}* (–°–∏–ª–∞: {bot_card['power']})\n\n"
    
    if user_card['power'] > bot_card['power']:
        win_amount = user_card['power'] * 1000
        await update_balance(callback.from_user.id, coins=win_amount, earned=True)
        result_text += f"üéâ **–í—ã –ø–æ–±–µ–¥–∏–ª–∏** –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ **{win_amount:,}** –º–æ–Ω–µ—Ç!"
    elif bot_card['power'] > user_card['power']: result_text += "üòï **–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏**."
    else: result_text += "ü§ù **–ù–∏—á—å—è!**"
        
    await callback.message.edit_text(result_text, reply_markup=get_back_button("menu:games"))

@main_router.callback_query(F.data == "menu:profile")
async def cb_profile(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user: return await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start", show_alert=True)
    level = user['rank_level']; rank_name = RANKS[level][1]; progress_text = ""
    next_rank_coins = RANKS.get(level + 1, (None, ""))[0]
    if next_rank_coins and next_rank_coins != float('inf'):
        current_rank_coins = RANKS[level][0]
        progress = (user['total_coins_earned'] - current_rank_coins) / (next_rank_coins - current_rank_coins)
        progress = max(0, min(1, progress))
        progress_bar = "‚ñà" * int(progress * 10) + "‚ñë" * (10 - int(progress * 10))
        progress_text = f"\n\n*–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ä–∞–Ω–≥–∞:*\n`{progress_bar}` {int(progress*100)}%"
    username = user['username'] or "–ë–µ–∑_–∏–º–µ–Ω–∏"
    profile_text = (f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å @{escape_markdown(username)}**\n\nüëë *–†–∞–Ω–≥:* {rank_name}\nüí∞ *–ú–æ–Ω–µ—Ç—ã:* {user['coins']:,}\n‚≠ê *–ó–≤—ë–∑–¥–æ—á–∫–∏:* {user['stars']:,}{progress_text}")
    await callback.message.edit_text(profile_text, reply_markup=get_back_button())
    
@main_router.callback_query(F.data == "menu:daily_bonus")
async def cb_daily_bonus(callback: CallbackQuery):
    user_id = callback.from_user.id; user = await get_user(user_id); today = datetime.now().date()
    last_bonus_date = datetime.strptime(user['last_bonus_date'], '%Y-%m-%d').date() if user['last_bonus_date'] else None
    if last_bonus_date == today: return await callback.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
    streak = (user['daily_bonus_streak'] % 7) + 1 if last_bonus_date and (today - last_bonus_date).days == 1 else 1
    base_reward = 100 * streak
    reward_text = f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: **{base_reward}** –º–æ–Ω–µ—Ç.\n–í–∞—à–∞ —Å–µ—Ä–∏—è: **{streak}** –¥–Ω–µ–π."
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET daily_bonus_streak = ?, last_bonus_date = ? WHERE user_id = ?", (streak, today.strftime('%Y-%m-%d'), user_id))
    await update_balance(user_id, coins=base_reward, earned=True)
    await callback.answer(reward_text.replace("*", "").replace("`", ""), show_alert=True)
    
@main_router.callback_query(F.data == "menu:tops")
async def cb_tops_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder(); kb.button(text="üèÜ –¢–æ–ø –ø–æ –º–æ–Ω–µ—Ç–∞–º", callback_data="top:coins"); kb.button(text="‚≠ê –¢–æ–ø –ø–æ –∑–≤—ë–∑–¥–æ—á–∫–∞–º", callback_data="top:stars")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"); kb.adjust(1); await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=kb.as_markup())

async def show_top_list(callback: CallbackQuery, top_type: str, currency_name: str, emoji: str):
    with sqlite3.connect(DB_NAME) as conn:
        conn.row_factory = sqlite3.Row; cursor = conn.cursor()
        cursor.execute(f"SELECT username, {top_type} FROM users WHERE {top_type} > 0 ORDER BY {top_type} DESC LIMIT 10")
        top_users = cursor.fetchall()
    if not top_users: return await callback.answer("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!", show_alert=True)
    top_text = f"üèÜ **–¢–æ–ø-10 –ø–æ {currency_name}**\n\n"
    for i, user in enumerate(top_users, 1):
        place_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"**{i}.**"); username = user['username'] or "–°–∫—Ä—ã—Ç–Ω—ã–π_–∏–≥—Ä–æ–∫"
        top_text += f"{place_emoji} @{escape_markdown(username)} ‚Äî **{user[top_type]:,}** {emoji}\n"
    await callback.message.edit_text(top_text, reply_markup=get_back_button("menu:tops"))

@main_router.callback_query(F.data == "top:coins")
async def cb_top_coins(callback: CallbackQuery): await show_top_list(callback, "coins", "–º–æ–Ω–µ—Ç–∞–º", "üí∞")

@main_router.callback_query(F.data == "top:stars")
async def cb_top_stars(callback: CallbackQuery): await show_top_list(callback, "stars", "–∑–≤—ë–∑–¥–æ—á–∫–∞–º", "‚≠ê")

@main_router.callback_query(F.data == "menu:cases")
async def cb_cases_menu(callback: CallbackQuery):
    user = await get_user(callback.from_user.id); kb = InlineKeyboardBuilder()
    text = "üéÅ **–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤**\n\n"
    for case_id, info in CASES.items():
        if info.get('currency') == 'key1': continue
        cost, currency, emoji = info['cost'], info.get('currency', 'coins'), {'coins': 'üí∞', 'stars': '‚≠ê'}[info.get('currency', 'coins')]
        text += f"**{info['name']}**\n–¶–µ–Ω–∞: {cost:,} {emoji}\n\n";
        if user[currency] >= cost: kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å {info['name']}", callback_data=f"case:{case_id}")
    
    user_inventory = await get_user_inventory(callback.from_user.id)
    key_count = next((count for item_id, count in user_inventory if item_id == 'key1'), 0)
    if key_count > 0: kb.button(text=f"üîë –û—Ç–∫—Ä—ã—Ç—å –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É ({key_count} —à—Ç.)", callback_data="case:treasure")
        
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"); kb.adjust(1); await callback.message.edit_text(text, reply_markup=kb.as_markup())

@main_router.callback_query(F.data.startswith("case:"))
async def cb_open_case(callback: CallbackQuery):
    case_id, user_id = callback.data.split(":")[1], callback.from_user.id; case_info, user = CASES[case_id], await get_user(user_id)
    cost, cost_currency = case_info['cost'], case_info.get('currency', 'coins')

    if cost_currency == 'key1':
        user_inventory = await get_user_inventory(user_id)
        if not any(item_id == 'key1' for item_id, _ in user_inventory): return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π!", show_alert=True)
        await remove_item_from_inventory(user_id, 'key1', 1)
    elif user[cost_currency] < cost: return await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
    else: await update_balance(user_id, coins=-cost if cost_currency == 'coins' else 0, stars=-cost if cost_currency == 'stars' else 0)
    
    await update_quest_progress(user_id, 'open_case')
    rand_val = random.randint(1, 100); cumulative_chance = 0; prize = None
    for p in case_info['prizes']:
        cumulative_chance += p['chance'];
        if rand_val <= cumulative_chance: prize = p; break
    if not prize: return await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    
    prize_text = ""
    if prize['type'] == 'coins':
        amount = random.randint(prize['amount'][0], prize['amount'][1])
        await update_balance(user_id, coins=amount, earned=True); prize_text = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{amount:,} –º–æ–Ω–µ—Ç** üí∞!"
    elif prize['type'] == 'stars':
        amount = prize['amount'] if isinstance(prize['amount'], int) else random.randint(prize['amount'][0], prize['amount'][1])
        await update_balance(user_id, stars=amount); prize_text = f"üåü –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{amount:,} –∑–≤—ë–∑–¥–æ—á–µ–∫** ‚≠ê!"
    elif prize['type'] == 'item':
        item_id = prize['item_id']; item_info = ITEMS[item_id]
        await add_item_to_inventory(user_id, item_id)
        prize_text = f"–ü—Ä–µ–¥–º–µ—Ç!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏: *{item_info['rarity']} {item_info['name']}*"

    await callback.answer(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º {case_info['name']}...", show_alert=False); await callback.message.answer(prize_text); await cb_cases_menu(callback)

@main_router.callback_query(F.data == "menu:exchange")
async def cb_exchange_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder();
    kb.button(text=f"–ü—Ä–æ–¥–∞—Ç—å ‚≠ê –∑–∞ üí∞ ({STAR_SELL_PRICE:,})", callback_data="exchange:s2c")
    kb.button(text=f"–ö—É–ø–∏—Ç—å ‚≠ê –∑–∞ üí∞ ({STAR_BUY_PRICE:,})", callback_data="exchange:c2s")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main"); kb.adjust(2,1); await callback.message.edit_text("üí± **–û–±–º–µ–Ω –≤–∞–ª—é—Ç**", reply_markup=kb.as_markup())

@main_router.callback_query(F.data.in_({"exchange:s2c", "exchange:c2s"}))
async def cb_start_exchange(callback: CallbackQuery, state: FSMContext):
    exchange_type = callback.data.split(":")[1]; await state.update_data(type=exchange_type); await state.set_state(ExchangeStates.amount)
    prompt = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥–æ—á–µ–∫.\n\n_–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'._"
    await callback.message.edit_text(prompt)

@main_router.message(ExchangeStates.amount)
async def process_exchange_amount(message: Message, state: FSMContext):
    if not message.text.isdigit(): return await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    amount = int(message.text)
    if amount <= 0: return await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    data = await state.get_data(); user = await get_user(message.from_user.id); await state.clear()
    if data['type'] == 's2c':
        if user['stars'] < amount: return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥–æ—á–µ–∫.")
        coins_get = amount * STAR_SELL_PRICE
        await update_balance(message.from_user.id, stars=-amount, coins=coins_get, earned=True)
        await message.answer(f"‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ **{amount}** ‚≠ê –∏ –ø–æ–ª—É—á–∏–ª–∏ **{coins_get:,}** üí∞.")
    elif data['type'] == 'c2s':
        cost = amount * STAR_BUY_PRICE
        if user['coins'] < cost: return await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ **{cost:,}** üí∞.")
        await update_balance(message.from_user.id, stars=amount, coins=-cost)
        await message.answer(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ **{amount}** ‚≠ê –∑–∞ **{cost:,}** üí∞.")

@main_router.message()
async def any_message(message: Message):
    if ADMIN_IDS and str(message.from_user.id) not in ADMIN_IDS:
        try:
            user_info_text = (f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @{message.from_user.username or '–ë–µ–∑_–∏–º–µ–Ω–∏'}\nID: {message.from_user.id}")
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, user_info_text)
                await bot.forward_message(chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e: logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# ----- üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê üöÄ -----
async def main():
    if not BOT_TOKEN: return logging.critical("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    dp.message.middleware(SponsorshipMiddleware())
    dp.callback_query.middleware(SponsorshipMiddleware())
    dp.include_router(main_router)
    
    init_db()
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
